require('dotenv').config();
const { GoogleGenerativeAI } = require('@google/generative-ai');

async function checkAvailableModels() {
    console.log('üîç Verificando modelos disponibles en Google Generative AI...\n');
    
    // Verificar que la clave de API est√© configurada
    if (!process.env.GOOGLE_AI_API_KEY) {
        console.error('‚ùå Error: GOOGLE_AI_API_KEY no est√° definida en el archivo .env');
        console.log('üìù Por favor, crea un archivo .env en la ra√≠z del proyecto con tu clave de API');
        console.log('üîó Obt√©n tu clave en: https://makersuite.google.com/app/apikey');
        return;
    }
    
    console.log('‚úÖ Clave de API configurada correctamente');
    
    try {
        const genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY);
        
        // Probar diferentes modelos directamente
        const testModels = [
            'gemini-1.5-pro',
            'gemini-1.5-flash',
            'gemini-pro',
            'gemini-pro-vision'
        ];
        
        console.log('üß™ Probando modelos espec√≠ficos...\n');
        
        let workingModel = null;
        
        for (const modelName of testModels) {
            try {
                console.log(`üìã Probando modelo: ${modelName}`);
                const model = genAI.getGenerativeModel({ model: modelName });
                
                // Hacer una prueba simple
                const result = await model.generateContent('Responde solo: OK');
                const response = await result.response;
                const text = response.text();
                
                console.log(`‚úÖ ${modelName}: Funcionando correctamente`);
                console.log(`   Respuesta: "${text}"`);
                
                if (!workingModel) {
                    workingModel = modelName;
                }
                
            } catch (error) {
                console.log(`‚ùå ${modelName}: Error - ${error.message}`);
            }
            console.log('');
        }
        
        // Recomendaci√≥n
        console.log('üí° Recomendaci√≥n:');
        if (workingModel) {
            console.log(`   ‚Ä¢ Usar "${workingModel}" como modelo principal`);
            console.log('   ‚Ä¢ El sistema funcionar√° correctamente con este modelo');
        } else {
            console.log('   ‚Ä¢ Ning√∫n modelo est√° funcionando');
            console.log('   ‚Ä¢ Verifica tu clave de API y permisos');
            console.log('   ‚Ä¢ El sistema usar√° fallbacks locales');
        }
        
        console.log('\nüìã Informaci√≥n adicional:');
        console.log('   ‚Ä¢ gemini-1.5-pro: Mejor para tareas complejas');
        console.log('   ‚Ä¢ gemini-1.5-flash: M√°s r√°pido, bueno para respuestas simples');
        console.log('   ‚Ä¢ gemini-pro: Modelo est√°ndar');
        console.log('   ‚Ä¢ gemini-pro-vision: Para im√°genes + texto');
        
    } catch (error) {
        console.error('‚ùå Error verificando modelos:', error.message);
        console.log('\nüîß Posibles soluciones:');
        console.log('1. Verifica que tu clave de API sea v√°lida');
        console.log('2. Aseg√∫rate de tener permisos para usar Google Generative AI');
        console.log('3. Revisa que la API est√© habilitada en tu proyecto de Google Cloud');
        console.log('4. Verifica tu conexi√≥n a internet');
        console.log('5. Revisa la documentaci√≥n oficial: https://ai.google.dev/');
    }
}

// Ejecutar la verificaci√≥n
checkAvailableModels(); 
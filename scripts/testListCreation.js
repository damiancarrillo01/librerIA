const AIService = require('../services/aiService');

async function testListCreation() {
    console.log('üß™ Probando creaci√≥n de listas de compras...\n');
    
    try {
        // Prueba 1: Verificar que los productos tienen el campo category
        console.log('üìã Prueba 1: Verificando productos con campo category');
        const products = await AIService.getAvailableProducts();
        console.log(`‚úÖ Productos disponibles: ${products.length}`);
        
        // Verificar que todos los productos tienen category
        const productsWithoutCategory = products.filter(p => !p.category);
        if (productsWithoutCategory.length > 0) {
            console.log(`‚ö†Ô∏è Productos sin category: ${productsWithoutCategory.length}`);
            productsWithoutCategory.slice(0, 3).forEach(p => {
                console.log(`   ‚Ä¢ ${p.name} - ID: ${p.id}`);
            });
        } else {
            console.log('‚úÖ Todos los productos tienen el campo category');
        }
        
        // Mostrar algunos productos de ejemplo
        console.log('\nüì¶ Productos de ejemplo:');
        products.slice(0, 3).forEach(product => {
            console.log(`   ‚Ä¢ ${product.name} - Categor√≠a: ${product.category} - $${product.price}`);
        });
        
        // Prueba 2: Procesar una lista simple
        console.log('\nüìã Prueba 2: Procesando lista de compras');
        
        const requestedItems = [
            { name: 'l√°piz', quantity: 5 },
            { name: 'cuaderno', quantity: 2 },
            { name: 'goma', quantity: 1 }
        ];
        
        const clientProfile = {
            description: 'Estudiante de secundaria, 15 a√±os, interesado en matem√°ticas'
        };
        
        console.log('üë§ Perfil del cliente:', clientProfile.description);
        console.log('üìã Items solicitados:', requestedItems.map(item => `${item.quantity}x ${item.name}`).join(', '));
        
        const result = await AIService.processShoppingList(
            requestedItems,
            clientProfile,
            'intermedio'
        );
        
        console.log('‚úÖ Resultado del procesamiento:');
        console.log(`   ‚Ä¢ √âxito: ${result.success}`);
        console.log(`   ‚Ä¢ Productos agregados: ${result.added_items.length}`);
        console.log(`   ‚Ä¢ Items no encontrados: ${result.not_found_items.length}`);
        
        // Mostrar productos agregados
        if (result.added_items.length > 0) {
            console.log('\nüõí Productos agregados:');
            result.added_items.forEach(product => {
                console.log(`   ‚Ä¢ ${product.name} - Cantidad: ${product.quantity_requested} - Categor√≠a: ${product.category} - $${product.price}`);
                console.log(`     Raz√≥n: ${product.reasoning}`);
            });
        }
        
        // Mostrar items no encontrados
        if (result.not_found_items.length > 0) {
            console.log('\n‚ùå Items no encontrados:');
            result.not_found_items.forEach(item => {
                console.log(`   ‚Ä¢ ${item.name} - Raz√≥n: ${item.reason}`);
            });
        }
        
        // Prueba 3: Verificar que los productos devueltos tienen todos los campos necesarios
        console.log('\nüìã Prueba 3: Verificando campos de productos devueltos');
        
        if (result.added_items.length > 0) {
            const product = result.added_items[0];
            const requiredFields = ['id', 'name', 'price', 'stock', 'category', 'quantity_requested', 'reasoning'];
            const missingFields = requiredFields.filter(field => !product.hasOwnProperty(field));
            
            if (missingFields.length > 0) {
                console.log(`‚ö†Ô∏è Campos faltantes: ${missingFields.join(', ')}`);
            } else {
                console.log('‚úÖ Todos los campos requeridos est√°n presentes');
            }
            
            console.log('üìã Campos del producto:');
            Object.keys(product).forEach(key => {
                console.log(`   ‚Ä¢ ${key}: ${product[key]}`);
            });
        }
        
        console.log('\nüéâ ¬°Todas las pruebas completadas exitosamente!');
        console.log('üöÄ La creaci√≥n de listas de compras est√° funcionando correctamente');
        console.log('üí∞ Caracter√≠sticas verificadas:');
        console.log('   ‚Ä¢ Campo category presente en todos los productos');
        console.log('   ‚Ä¢ Procesamiento de listas sin errores');
        console.log('   ‚Ä¢ Selecci√≥n inteligente de productos');
        console.log('   ‚Ä¢ Manejo correcto de campos undefined');
        
    } catch (error) {
        console.error('‚ùå Error en las pruebas:', error);
        console.error('Stack trace:', error.stack);
    }
}

// Ejecutar las pruebas
testListCreation().then(() => {
    console.log('\n‚úÖ Script de prueba completado');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
}); 
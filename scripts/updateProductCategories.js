const firebase = require('../config/firebase');

// Mapeo de nombres de productos a categor√≠as
const categoryMapping = {
    // Papeler√≠a
    'cuaderno': 'Papeler√≠a',
    'libreta': 'Papeler√≠a',
    'agenda': 'Organizaci√≥n',
    'carpeta': 'Organizaci√≥n',
    
    // Escritura
    'l√°piz': 'Escritura',
    'lapiz': 'Escritura',
    'bol√≠grafo': 'Escritura',
    'boligrafo': 'Escritura',
    'resaltador': 'Escritura',
    'marcador': 'Escritura',
    'goma': 'Escritura',
    'sacapuntas': 'Escritura',
    'corrector': 'Escritura',
    
    // Geometr√≠a
    'regla': 'Geometr√≠a',
    'comp√°s': 'Geometr√≠a',
    'compas': 'Geometr√≠a',
    'transportador': 'Geometr√≠a',
    'escuadra': 'Geometr√≠a',
    'cartab√≥n': 'Geometr√≠a',
    'cartabon': 'Geometr√≠a',
    
    // Manualidades
    'tijeras': 'Manualidades',
    'pegamento': 'Manualidades',
    'grapadora': 'Manualidades',
    'clips': 'Manualidades',
    'cinta': 'Manualidades',
    
    // Organizaci√≥n
    'mochila': 'Organizaci√≥n',
    'estuche': 'Organizaci√≥n',
    'separadores': 'Organizaci√≥n',
    'post-it': 'Organizaci√≥n',
    'postit': 'Organizaci√≥n',
    
    // Matem√°ticas
    'calculadora': 'Matem√°ticas',
    
    // Arte
    'acuarelas': 'Arte',
    'pinceles': 'Arte',
    'block': 'Arte',
    'colores': 'Arte',
    'plastilina': 'Arte',
    'papel': 'Arte',
    'cartulina': 'Arte',
    'lustre': 'Arte',
    
    // Tecnolog√≠a
    'pendrive': 'Tecnolog√≠a',
    'usb': 'Tecnolog√≠a',
    'mouse': 'Tecnolog√≠a',
    'teclado': 'Tecnolog√≠a',
    'aud√≠fonos': 'Tecnolog√≠a',
    'audifonos': 'Tecnolog√≠a',
    'laptop': 'Tecnolog√≠a'
};

function determineCategory(productName) {
    const name = productName.toLowerCase();
    
    // Buscar coincidencias exactas primero
    for (const [keyword, category] of Object.entries(categoryMapping)) {
        if (name.includes(keyword)) {
            return category;
        }
    }
    
    // Si no hay coincidencia, usar categor√≠a por defecto
    return 'Otros';
}

async function updateProductCategories() {
    console.log('üîÑ Actualizando categor√≠as de productos...\n');
    
    try {
        const productsRef = firebase.db.collection('products');
        const snapshot = await productsRef.get();
        
        console.log(`üì¶ Productos encontrados: ${snapshot.size}`);
        
        let updatedCount = 0;
        let alreadyHasCategory = 0;
        
        const batch = firebase.db.batch();
        
        snapshot.forEach(doc => {
            const product = doc.data();
            const productName = product.name || '';
            
            // Si ya tiene categor√≠a, no actualizar
            if (product.category && product.category !== 'undefined') {
                alreadyHasCategory++;
                return;
            }
            
            // Determinar categor√≠a basada en el nombre
            const category = determineCategory(productName);
            
            // Agregar operaci√≥n de actualizaci√≥n al batch
            batch.update(doc.ref, { category: category });
            updatedCount++;
            
            console.log(`   ‚Ä¢ ${productName} ‚Üí ${category}`);
        });
        
        if (updatedCount > 0) {
            console.log(`\nüíæ Guardando ${updatedCount} actualizaciones...`);
            await batch.commit();
            console.log('‚úÖ Actualizaciones guardadas exitosamente');
        } else {
            console.log('‚úÖ No hay productos que necesiten actualizaci√≥n');
        }
        
        console.log(`\nüìä Resumen:`);
        console.log(`   ‚Ä¢ Productos con categor√≠a: ${alreadyHasCategory}`);
        console.log(`   ‚Ä¢ Productos actualizados: ${updatedCount}`);
        console.log(`   ‚Ä¢ Total de productos: ${snapshot.size}`);
        
        // Verificar el resultado
        console.log('\nüîç Verificando resultado...');
        const verificationSnapshot = await productsRef.get();
        const productsWithoutCategory = [];
        
        verificationSnapshot.forEach(doc => {
            const product = doc.data();
            if (!product.category || product.category === 'undefined') {
                productsWithoutCategory.push(product.name);
            }
        });
        
        if (productsWithoutCategory.length > 0) {
            console.log(`‚ö†Ô∏è Productos sin categor√≠a despu√©s de la actualizaci√≥n: ${productsWithoutCategory.length}`);
            productsWithoutCategory.slice(0, 5).forEach(name => {
                console.log(`   ‚Ä¢ ${name}`);
            });
        } else {
            console.log('‚úÖ Todos los productos tienen categor√≠a asignada');
        }
        
        console.log('\nüéâ ¬°Actualizaci√≥n de categor√≠as completada!');
        
    } catch (error) {
        console.error('‚ùå Error actualizando categor√≠as:', error);
        throw error;
    }
}

// Ejecutar la actualizaci√≥n
updateProductCategories().then(() => {
    console.log('\n‚úÖ Script completado exitosamente');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
}); 